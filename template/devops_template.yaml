apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: dev-ops.yaml
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: digital-identity-apache
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
          stage 'build in sviluppo'
          openshiftBuild(buildConfig: 'apache', showBuildLogs: 'true', namespace: 'digital-identity-sviluppo')
          stage 'deploy in sviluppo'
          openshiftDeploy(deploymentConfig: 'apache', namespace: 'digital-identity-sviluppo')
          }

          stage 'Approvazione per passaggio in Collaudo'
            timeout(time:30, unit:'MINUTES') {
              input message:'Approvazione per passaggio in Collaudo'
          }

          node('maven') {
          stage 'build in collaudo'
          openshiftBuild(buildConfig: 'apache', showBuildLogs: 'true', namespace: 'digital-identity-collaudo')
          stage 'deploy in collaudo'
          openshiftDeploy(deploymentConfig: 'apache', namespace: 'digital-identity-collaudo')
          }

          stage 'Approvazione per passaggio in Produzione'
            timeout(time:30, unit:'MINUTES') {
              input message:'Approvazione per passaggio in Produzione'
          }

          node('maven') {
          stage 'build in produzione'
          openshiftBuild(buildConfig: 'apache', showBuildLogs: 'true', namespace: 'digital-identity-produzione')
          stage 'deploy in produzione'
          openshiftDeploy(deploymentConfig: 'apache', namespace: 'digital-identity-produzione')
          }
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: digital-identity-services
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
          stage 'build in sviluppo'
          openshiftBuild(buildConfig: 'digitalidentity', showBuildLogs: 'true', namespace: 'digital-identity-sviluppo')
          stage 'deploy servizi in sviluppo  (header,footer,atti,news,formazione,menu)'; 
          openshiftDeploy(deploymentConfig:'atti', namespace:'digital-identity-sviluppo'); 
          openshiftDeploy(deploymentConfig:'footer', namespace:'digital-identity-sviluppo'); 
          openshiftDeploy(deploymentConfig:'formazione', namespace:'digital-identity-sviluppo'); 
          openshiftDeploy(deploymentConfig:'header', namespace:'digital-identity-sviluppo'); 
          openshiftDeploy(deploymentConfig:'menuintranet', namespace:'digital-identity-sviluppo'); 
          openshiftDeploy(deploymentConfig:'newsavvisi', namespace:'digital-identity-sviluppo');
          }

          stage 'Approvazione per passaggio in Collaudo'
            timeout(time:30, unit:'MINUTES') {
              input message:'Approvazione per passaggio in Collaudo'
          }

          node('maven') {
          stage 'build in collaudo'
          openshiftBuild(buildConfig: 'digitalidentity', showBuildLogs: 'true', namespace: 'digital-identity-collaudo')
          stage 'deploy in collaudo (header,footer,atti,news,formazione,menu)';
          openshiftDeploy(deploymentConfig:'atti', namespace:'digital-identity-collaudo'); 
          openshiftDeploy(deploymentConfig:'footer', namespace:'digital-identity-collaudo'); 
          openshiftDeploy(deploymentConfig:'formazione', namespace:'digital-identity-collaudo'); 
          openshiftDeploy(deploymentConfig:'header', namespace:'digital-identity-collaudo'); 
          openshiftDeploy(deploymentConfig:'menuintranet', namespace:'digital-identity-collaudo'); 
          openshiftDeploy(deploymentConfig:'newsavvisi', namespace:'digital-identity-collaudo');
          }

          stage 'Approvazione per passaggio in Produzione'
            timeout(time:30, unit:'MINUTES') {
              input message:'Approvazione per passaggio in Produzione'
          }

          node('maven') {
          stage 'build in produzione'
          openshiftBuild(buildConfig: 'digitalidentity', showBuildLogs: 'true', namespace:'digital-identity-produzione')
          stage 'deploy servizi in produzione (header,footer,atti,news,formazione,menu)';
          openshiftDeploy(deploymentConfig:'atti', namespace:'digital-identity-produzione'); 
          openshiftDeploy(deploymentConfig:'footer', namespace:'digital-identity-produzione'); 
          openshiftDeploy(deploymentConfig:'formazione', namespace:'digital-identity-produzione'); 
          openshiftDeploy(deploymentConfig:'header', namespace:'digital-identity-produzione'); 
          openshiftDeploy(deploymentConfig:'menuintranet', namespace:'digital-identity-produzione'); 
          openshiftDeploy(deploymentConfig:'newsavvisi', namespace:'digital-identity-produzione');
          }
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: jenkins-ephemeral
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: jenkins
      spec:
        containers:
        - env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: "true"
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 420
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: jenkins
        serviceAccountName: jenkins
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: jenkins-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: jenkins-ephemeral
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    host: jenkins-dev-ops.rhel-cdk.10.1.2.2.xip.io
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-07-13T12:37:13Z
        status: "True"
        type: Admitted
      host: jenkins-dev-ops.rhel-cdk.10.1.2.2.xip.io
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace":
        "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    labels:
      app: jenkins-ephemeral
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: jenkins-ephemeral
      template: jenkins-ephemeral-template
    name: jenkins-jnlp
  spec:
    ports:
    - name: agent
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}